// <auto-generated />
using Facebook_MKT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Facebook_MKT.Data.Migrations
{
    [DbContext(typeof(FBDataContext))]
    [Migration("20240727113019_initinial")]
    partial class initinial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Faceebook_MKT.Domain.Models.Account", b =>
                {
                    b.Property<int>("AccountIDKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cookie")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email1Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email2")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email2Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FolderIdKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GPMID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Proxy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AccountIDKey");

                    b.HasIndex("FolderIdKey");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Faceebook_MKT.Domain.Models.Folder", b =>
                {
                    b.Property<int>("FolderIdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FolderIdKey");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Faceebook_MKT.Domain.Models.Page", b =>
                {
                    b.Property<int>("PageIdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderIdKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageFollow")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageID")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageLike")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PageIdKey");

                    b.HasIndex("AccountID");

                    b.HasIndex("FolderIdKey");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Faceebook_MKT.Domain.Models.Account", b =>
                {
                    b.HasOne("Faceebook_MKT.Domain.Models.Folder", "Folder")
                        .WithMany("Accounts")
                        .HasForeignKey("FolderIdKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Faceebook_MKT.Domain.Models.Page", b =>
                {
                    b.HasOne("Faceebook_MKT.Domain.Models.Account", "Account")
                        .WithMany("Pages")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Faceebook_MKT.Domain.Models.Folder", "Folder")
                        .WithMany("Pages")
                        .HasForeignKey("FolderIdKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Faceebook_MKT.Domain.Models.Account", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Faceebook_MKT.Domain.Models.Folder", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
