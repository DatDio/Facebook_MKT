// <auto-generated />
using System;
using Facebook_MKT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Facebook_MKT.Data.Migrations
{
    [DbContext(typeof(FBDataContext))]
    [Migration("20240921051427_addUniqueForTableAcount")]
    partial class addUniqueForTableAcount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Account", b =>
                {
                    b.Property<int>("AccountIDKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("C_2FA")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cookie")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email1Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email2Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("FolderIdKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GPMID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Proxy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserAgent")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountIDKey");

                    b.HasIndex("FolderIdKey");

                    b.HasIndex("UID")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountIDKey = 1,
                            C_2FA = "eghjdsjkgsdhg",
                            FolderIdKey = 1,
                            Password = "qưerfuhsdiuvsd",
                            UID = "47812389"
                        },
                        new
                        {
                            AccountIDKey = 2,
                            C_2FA = "eghjdsjksgsdggsdhg",
                            FolderIdKey = 1,
                            Password = "passcfb",
                            UID = "4781238923532"
                        });
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Folder", b =>
                {
                    b.Property<int>("FolderIdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("FolderIdKey");

                    b.HasIndex("FolderName")
                        .IsUnique();

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            FolderIdKey = 1,
                            FolderName = "All"
                        },
                        new
                        {
                            FolderIdKey = 2,
                            FolderName = "Test"
                        });
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.FolderGroup", b =>
                {
                    b.Property<int>("FolderIdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("FolderIdKey");

                    b.HasIndex("FolderName")
                        .IsUnique();

                    b.ToTable("FolderGroup");

                    b.HasData(
                        new
                        {
                            FolderIdKey = 1,
                            FolderName = "All"
                        });
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.FolderPage", b =>
                {
                    b.Property<int>("FolderIdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("FolderIdKey");

                    b.HasIndex("FolderName")
                        .IsUnique();

                    b.ToTable("FolderPage");

                    b.HasData(
                        new
                        {
                            FolderIdKey = 1,
                            FolderName = "All"
                        });
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Group", b =>
                {
                    b.Property<int>("GroupIdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderGroupFolderIdKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderIdKey")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("GroupCensor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupMember")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupIdKey");

                    b.HasIndex("FolderGroupFolderIdKey");

                    b.HasIndex("GroupID")
                        .IsUnique();

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Page", b =>
                {
                    b.Property<int>("PageIdKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountIDKey")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderIdKey")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageFollow")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageLike")
                        .HasColumnType("TEXT");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PageStatus")
                        .HasColumnType("TEXT");

                    b.HasKey("PageIdKey");

                    b.HasIndex("AccountIDKey");

                    b.HasIndex("FolderIdKey");

                    b.HasIndex("PageID")
                        .IsUnique();

                    b.ToTable("Pages");

                    b.HasData(
                        new
                        {
                            PageIdKey = 1,
                            AccountIDKey = 1,
                            FolderIdKey = 1,
                            PageID = "23784589235",
                            PageName = "Dio Tech"
                        },
                        new
                        {
                            PageIdKey = 2,
                            AccountIDKey = 1,
                            FolderIdKey = 1,
                            PageID = "23784589233455",
                            PageName = "Dio Tech"
                        },
                        new
                        {
                            PageIdKey = 3,
                            AccountIDKey = 1,
                            FolderIdKey = 1,
                            PageID = "2378454353289235",
                            PageName = "Vũ trụ bao la"
                        },
                        new
                        {
                            PageIdKey = 4,
                            AccountIDKey = 2,
                            FolderIdKey = 1,
                            PageID = "2378458923353455",
                            PageName = "Dio Tech account 2"
                        });
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Account", b =>
                {
                    b.HasOne("Facebook_MKT.Data.Entities.Folder", "Folder")
                        .WithMany("Accounts")
                        .HasForeignKey("FolderIdKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Group", b =>
                {
                    b.HasOne("Facebook_MKT.Data.Entities.FolderGroup", "FolderGroup")
                        .WithMany("Groups")
                        .HasForeignKey("FolderGroupFolderIdKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FolderGroup");
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Page", b =>
                {
                    b.HasOne("Facebook_MKT.Data.Entities.Account", "Account")
                        .WithMany("Pages")
                        .HasForeignKey("AccountIDKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facebook_MKT.Data.Entities.FolderPage", "FolderPage")
                        .WithMany("Pages")
                        .HasForeignKey("FolderIdKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FolderPage");
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Account", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.Folder", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.FolderGroup", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Facebook_MKT.Data.Entities.FolderPage", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
